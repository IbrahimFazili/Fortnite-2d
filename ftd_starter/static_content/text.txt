_line_line_intersect(a1, a2, b1, b2, intersection) {
		let b = a2.sub(a1);
		let d = b2.sub(b1);

		let bDotDPerp = (b.x * d.y) - (b.y * d.x);
		if (bDotDPerp === 0) return false;

		let c = b1.sub(a1);
		let t = ((c.x * d.y) - (c.y * d.x)) / bDotDPerp;
		if (t < 0 || t > 1) return false;

		let u = ((c.x * b.y) - (c.y * b.x)) / bDotDPerp;
		if (u < 0 || u > 1) return false;

		const _in = a1.add(b.multiply(t));
		intersection.x = _in.x;
		intersection.y = _in.y;
		return true;
	}

	intersect(ray) {
		let endpt = ray.origin.add(ray.direction.multiply(ray.max_t));
		let topRight = new Pair(this.bottomRight.x, this.topLeft.y);
		let bottomLeft = new Pair(this.topLeft.x, this.bottomRight.y);
		
		let intersection = new Pair(0, 0);
		let t = Infinity;
		// bl br
		if (this._line_line_intersect(ray.origin, endpt, bottomLeft, this.bottomRight, intersection)) {
			let _t = intersection.sub(ray.origin).norm();
			if (_t < t) t = _t;
		}
		// br tr
		if (this._line_line_intersect(ray.origin, endpt, this.bottomRight, topRight, intersection)) {
			let _t = intersection.sub(ray.origin).norm();
			if (_t < t) t = _t;
		}
		// tr tl
		if (this._line_line_intersect(ray.origin, endpt, topRight, this.topLeft, intersection)) {
			let _t = intersection.sub(ray.origin).norm();
			if (_t < t) t = _t;
		}
		// tl bl
		if (this._line_line_intersect(ray.origin, endpt, bottomLeft, this.topLeft, intersection)) {
			let _t = intersection.sub(ray.origin).norm();
			if (_t < t) t = _t;
		}

		if (t <= ray.max_t) {
			ray.hit_t = t;
			return true;
		}

		return false;
	}